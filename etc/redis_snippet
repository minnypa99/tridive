var timestamp = new Date();
var milliseconds = timestamp.getTime();

////////////////////  url parsing
const url = require('url');

function count(req, res, redis) {
  var parsedObj = url.parse(req.url, true);
      
        redis.pipeline()
        .scard('activeQ:' + parsedObj.query.ctx)
      .zcard('waitingQ:' + parsedObj.query.ctx)
        .exec(function(err, result){       
    if (err) {
      res.statusCode = 404;
      res.end();
      return;
    }
    //log.debug('result: ', result);
    res.statusCode = 200;
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(result));
  });
}


/////////////// LUA Scripts
const http = require('http');

const redishost = "10.32.63.19"
const redisport = 6379
const redis = require('redis');
const client = redis.createClient(redisport, redishost);


var ready = 'return redis.call("ZADD", KEYS[1], ARGV[1], ARGV[2])' ;

var reserve = 'local ip_arr = redis.call("ZPOPMIN", KEYS[1]) if table.getn(ip_arr) > 1 then local ip = table.remove(ip_arr, 1) if redis.call("ZADD", KEYS[2], ARGV[1], ip) == 1 then return ip else return nil end else return nil end';

var inuse = 'if redis.call("ZREM", KEYS[1], ARGV[2]) == 1 then return redis.call("ZADD", KEYS[2], ARGV[1], ARGV[2]) else return nil end';
var free = 'if redis.call("ZREM", KEYS[1], ARGV[2]) == 1 then return redis.call("ZADD", KEYS[2], ARGV[1], ARGV[2]) else return nil end';
var ext_ip = '';


///////////// change to READY
const req = http.request(options, res => {
  console.log(`statusCode: ${res.statusCode}`)

  res.on('data', function(d){
ext_ip += d;

  });

  res.on('end', function(){
    console.log(ext_ip);

    client.eval(
        ready, //lua source code
        1, // one "key" to pass
        "ready", // key of sortedset
        milliseconds, // ARGV[1] - e.g. what field to use
        ext_ip, // ARGV[2] - e.g. what value to set if present.
        function(err, res) {
            if( err ){
              console.log('ready err ' + err );
              // return playImg
            }else{
               console.log('reply is ::' + res );
            }
        }
      );

  });

});

req.on('error', error => {
  console.error(error)
});

req.end();


//////////////////. Change to RESERVE
client.eval(
    reserve, //lua source code
    2, // two "key" to pass
    "ready", // first key of sortedset
    "reserve", // second key
    milliseconds, // score for reserver set
    function(err, res) {
      if( err || res == null || res.length <1){
        console.log('ready err ' + err );
        // return playImg
      }else{
        console.log('ip address is :: ' + res );
      }
    }
  );
  
/////////////////. change to INUSE
client.eval(
    inuse, //lua source code
    2, // one "key" to pass
    "reserve", // key of sortedset
    "inuse", // second key
    milliseconds, // score for reserver set
    "10.10.10.10", // ip address
    function(err, res) {
      if( err || res == null || res != 1){
      console.log('ready err ' + err );
      // return playImg
      }else{
      console.log('reply is :: ' + res );
      }
    }
  );


////////////  FREE IP address 
client.eval(
    free, //lua source code
    2, // one "key" to pass
    "inuse", // key of sortedset
    "ready", // second key
    milliseconds, // score for ready set
    "10.10.10.10", // ip address
    function(err, res) {
      if( err || res == null || res != 1){
          console.log('ready err ' + err );
      // return playImg
      }else{
          console.log('reply is :: ' + res );
      }
    }
  );
