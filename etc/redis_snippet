// get VM metadata
curl -H "Metadata-Flavor: Google" http://metadata/computeMetadata/v1/instance/
curl -H "Metadata-Flavor: Google" http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip

// restart VM Instance
 POST https://www.googleapis.com/compute/v1/projects/605373481786/zones/us-central1-b/instances/instance-win-gpu/reset
 https://cloud.google.com/compute/docs/reference/rest/v1/instances/reset // api 가이드



/////////////// LUA Scripts
const http = require('http');
const url = require('url');
const redishost = "10.32.63.19"
const redisport = 6379
const redis = require('redis');
const client = redis.createClient(redisport, redishost);

var ext_ip = '';
var vm_name = '';
var zone_path = '';
var project_id = '';
var zone = '';
var vm_info = '';
var timestamp = new Date();
var milliseconds = timestamp.getTime();

var ready = 'if redis.call("ZADD", KEYS[1], ARGV[1], ARGV[2]) >= 0 then return redis.call("HSET", KEYS[2], ARGV[2], ARGV[3]) else return nil end'  ;

var reserve = 'local ip_arr = redis.call("ZPOPMIN", KEYS[1]) if table.getn(ip_arr) > 1 then local ip = table.remove(ip_arr, 1) if redis.call("ZADD", KEYS[2], ARGV[1], ip) == 1 then return ip else return nil end else return nil end';

var inuse = 'if redis.call("ZREM", KEYS[1], ARGV[2]) == 1 then return redis.call("ZADD", KEYS[2], ARGV[1], ARGV[2]) else return nil end';
var free = 'if redis.call("ZREM", KEYS[1], ARGV[2]) == 1 then return redis.call("ZADD", KEYS[2], ARGV[1], ARGV[2]) else return nil end';
var refresh = 'return redis.call("ZRANGEBYSCORE", KEYS[1], "-inf", ARGV[1])';
var ext_ip = '';


///////////// change to READY
var options={
	host: 'metadata',
	path: '/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip',
	method: 'GET',
  headers: {
    'Metadata-Flavor': 'Google'
  }
}

var options_name={
	host: 'metadata',
	path: '/computeMetadata/v1/instance/name',
	method: 'GET',
  headers: {
    'Metadata-Flavor': 'Google'
  }
}

var options_zone={
	host: 'metadata',
	path: '/computeMetadata/v1/instance/zone',
	method: 'GET',
  headers: {
    'Metadata-Flavor': 'Google'
  }
}

////  code snipet in constructor


http.get(options, function(res) {
  res.on('data', function(chunk) { ext_ip += chunk; });
  res.on('end', function(){ 
	console.log('ext_ip = ' + ext_ip );
	http.get(options_name, function(res) {
  	  res.on('data', function(chunk) { vm_name += chunk; });
  	  res.on('end', function(){ 
		console.log('vm_name = ' + vm_name ); 
		http.get(options_zone, function(res) {
		  res.on('data', function(chunk) { zone_path += chunk; });
		  res.on('end', function(){
		  	var zone_arr = zone_path.split("/");
			project_id = zone_arr[1];
			zone = zone_arr[3];
			console.log( 'project id is ' + project_id + ', zone is ' + zone );
			vm_info = project_id + ',' + zone + ',' + vm_name;

    			client.eval(
        			ready, //lua source code
        			2, // one "key" to pass
        			"ready", // key of sortedset
				"vminfo", // key of hash set
        			milliseconds, // ARGV[1] score by timestamp
        			ext_ip, // ARGV[2] external ip address
				vm_info, // ARGV[3] proejct_id + zone + vm_name
        			function(err, res) {
            			  if( err || res == null){
              			    console.log('ready err ' + err );
              			    // return playImg
            			  }else{
               			    console.log('ready insert reply ::' + res );
            			  }
        			}
      			);
		  });
		});
	  });
	});
  });
});


  ///////// 21-10-01 check no-response vms in reserve state - REFRESH
  app.get( '/refresh', (req, res) => {

    client.eval(
        refresh, //lua source code
        1, // one "key" to pass
        "reserve", // key of sortedset
        milliseconds - 100000, // ARGV[1] - timestamp 100sec ago
        function(err, result) {
            if( err || result == null){
              console.log('get reserve err ' + err );
		res.status(500).send('Fail to refresh VMs');
            }else{
               console.log('target in reserve are ::' + result );
		const ip_arr = result.toString().split(",");

		client.eval(
		   refresh,
		   1,
		   "inuse",
		   milliseconds - 10800000,  // timestamp 3hours ago
		   function(err, result1){
		  	if( err || result1 == null ) {
			   console.log('get inuse err ' + err);
			   res.status(500).send('Fail to refresh VMs - inuse');
			}else{
			   console.log('target in inuse are :: ' + result1);
			   const ip_arr1 = result1.toString().split(",");
			   
			   const target_arr = ip_arr.concat(ip_arr1);

			   target_arr.forEach(function(element, index){
				console.log(index + ' ' + element );
				// call VM delete function
				// if success then remove IP from reserver, else move IP to garbage
				//client.zrem("reserve", element );
				//client.zadd("garbage", element );
				//client.hdel("vminfo", element );
			   });

			   res.send('Success');
            		}
        	    }
      		);
	    }
	});

  });




  ////////// 21-10-01 pick a vm to reserve queue - RESERVE
  app.get( '/reserve', (req, res) => {
	
    client.eval(
        reserve, //lua source code
        2, // one "key" to pass
	"ready", // key of sortedset
        "reserve", // key of sortedset
        milliseconds, // ARGV[1] - timestamp 100sec ago
        function(err, result) {
            if( err || result == null ){
              console.log('reserve err ' + err );
		res.status(500).send('Fail to reserve VM');
            }else{
               console.log('reserve ip ::' + result );
		res.send(result.toString());
            }
        }
      );

  });



  ///////////// 21-10-01 change vm status to inuse - INUSE
  app.get( '/inuse', (req, res) => {
	var parsedObj = url.parse(req.url, true);  //parsedObj.query.ip
    client.eval(
        inuse, //lua source code
        2, // one "key" to pass
	"reserve", // key of sortedset
        "inuse", // key of sortedset
        milliseconds, // ARGV[1] - timestamp 
	parsedObj.query.ip,  // ARGV[2] ip address in query string
        function(err, result) {
            if( err || result == null || parseInt(result) < 1 ){
              console.log('inuse err ' + err );
		res.status(500).send('Fail to allocate VM');
            }else{
               console.log('inuse result ::' + parseInt(result) );
		res.send('Success');
            }
        }
      );

  });



  ///////////// 21-10-01 change vm status to ready - FREE
  app.get( '/free', (req, res) => {
	var parsedObj = url.parse(req.url, true);  //parsedObj.query.ip
    client.eval(
        free, //lua source code
        2, // one "key" to pass
	"inuse", // key of sortedset
        "ready", // key of sortedset
        milliseconds, // ARGV[1] - timestamp 
	parsedObj.query.ip,  // ARGV[2] ip address in query string
        function(err, result) {
            if( err || result == null || parseInt(result) < 1 ){
              console.log('inuse err ' + err );
		res.status(500).send('Fail to free VM');
            }else{
               console.log('free result ::' + parseInt(result) );
		res.send('Success');
            }
        }
      );

  });

